
if game.PlaceId == 2809202155 then
	--disable 3d render
	game:GetService('RunService'):Set3dRenderingEnabled(render)
	--bypasses
	loadstring(game:HttpGet('https://raw.githubusercontent.com/ikottiz/yba/main/bypasses'))()
	--cuh
	while not game:IsLoaded() do wait() end
	--serverhop
	function serverhop()
		placeId = game.PlaceId
		function findTeleport()
			local nextCursor;
			while true do
				if nextCursor == 'end' then
					break
				elseif not nextCursor then
					nextCursor = ''
				end
				url = 'https://games.roblox.com/v1/games/'..tostring(placeId)..'/servers/Public?sortOrder=Desc&excludeFullGames=true&limit=100&cursor='..nextCursor
				local request = game:HttpGet(url)
				local jsonDecode = game:GetService("HttpService"):JSONDecode(request)
				nextCursor = jsonDecode.nextPageCursor
				if not nextCursor then
					nextCursor = 'end'
				end
				local data = jsonDecode.data
				for i,v in pairs(data) do
					if not oldServers[v.id] then
						serverId = v.id
					end
				end
				if serverId then
					game:GetService('TeleportService'):TeleportToPlaceInstance(placeId, serverId, game.Players.LocalPlayer, nil, oldServers)
					break
				end
			end
		end
	
		oldServers = game:GetService('TeleportService'):GetLocalPlayerTeleportData() or {}
		oldServers[game.JobId] = true
		findTeleport()
		if not serverId then
			oldServers = {[game.JobId] = true}
			findTeleport()
		end
		if not serverId then
			oldServers = {}
			findTeleport()
		end
	end
	--collect function
	function collect(instance)
		local base,prompt = instance:FindFirstChild('Base'),instance:FindFirstChild('RightPrompt')
		if instance.Parent and prompt.Parent ~= nil and prompt.MaxActivationDistance ~= 0 then
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(base.Position) --teleport
			wait(.5)
			if game.Players.LocalPlayer:DistanceFromCharacter(base.Position) < 20 then --if teleported
				fireproximityprompt(prompt)
			end
		end
	end
	--getarrows
	function getArrows()
		local arrows = 0
		for i,v in ipairs(player.Backpack:GetChildren()) do
			if v.Name == 'Lucky Arrow' then
				arrows = arrows + 1
			end
		end
		return tostring(arrows)
	end
	--starting
	game.Players.LocalPlayer:WaitForChild('PlayerGui').DescendantRemoving:Connect(function(d)
		if d.Name == 'LoadingScreen1' then
            syn.request({
                Url = settings.logsWebhook,
                Method = "POST",
                Headers = {["content-type"] = "application/json" },
                Body = game:GetService('HttpService'):JSONEncode({
                    ["content"] = "",
                    ["embeds"] = {{
                        ["title"] = '**Logs**',
                        ["description"] = "",
                        ["type"] = "rich",
                        ["color"] = tonumber(0xA1C3A9),
                        ["fields"] = {
                            {
                                ["name"] = "Account:",
                                ["value"] = game.Players.LocalPlayer.Name,
                                ["inline"] = false
                            },
                            {
                                ["name"] = "Arrows:",
                                ["value"] = getArrows(),
                                ["inline"] = false
                            },
							{
								["name"] = "Players:",
								["value"]= #game:GetService("Players"):GetPlayers(),
								["inline"] = false,
							},
                        },
                    }}
                })
            })
		end
	end)
	--error handler,server hop on kick or teleport failure
	game:GetService('CoreGui').RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
		if child.Name == 'ErrorPrompt' then
			serverhop()
		end
	end)
	--skip loading
	local loadbtn,playbtn
	local m1 = function(path)
		for i,v in pairs(getconnections(path.MouseButton1Click)) do v.Function() end
	end
	while true do
		for i,v in pairs(game:GetService("Players").LocalPlayer:WaitForChild('PlayerGui'):GetDescendants()) do
			if v.Name == 'TextButton' and v.Parent.Name == 'Skip' then
				loadbtn = v
			elseif v.Name == 'Play' and v.Parent.Name == 'LoadingScreen' then
				playbtn = v
			end
		end
		if loadbtn and playbtn then
			break
		end
	end
	while #getconnections(loadbtn.MouseButton1Click) == 0 do wait() end
	m1(loadbtn)
	wait(.2)
	while #getconnections(playbtn.MouseButton1Click) == 0 do wait() end
	m1(playbtn)	
	game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild('HUD'):WaitForChild('Main'):WaitForChild('DropMoney'):WaitForChild('Money').ChildAdded:Connect(function(child)
		if child.Name == 'Template' then
			child.Changed:Connect(function(property)
				if property == 'Visible' then
					wait(.5)
					if string.match(string.lower(child.Text),'arrow') then
						syn.request({
							Url = "settings.farmWebhook",
							Method = "POST",
							Headers = {["content-type"] = "application/json" },
							Body = game:GetService('HttpService'):JSONEncode({
								["content"] = "",
								["embeds"] = {{
									["title"] = "**Lucky Arrow found!**",
									["description"] = "",
									["type"] = "rich",
									["color"] = tonumber(0x00AB2B),
									["fields"] = {
										{
											["name"] = "Account:",
											["value"] = game:GetService("Players").LocalPlayer.Name,
											["inline"] = false
										},
										{
											["name"] = "Arrows:",
											["value"] = getArrows(),
											["inline"] = false
										},
										{
										["name"] = "Players:",
										["value"]= #game:GetService("Players"):GetPlayers(),
										["inline"] = false,
										},
									},
								}}
							})
						})
					end
				end
			end)
		end
	end)
	--loop
	local counter = 0
	while wait(5) do
		for i,v in ipairs(game.Workspace.Item_Spawns.Items:GetChildren()) do
			if v.Name == 'Lucky Arrow' then
				collect(v)
			end
		end
		counter = counter + 1
		if counter == settings.serverTime / 5 then
			serverhop()
			break
		end
	end
end
